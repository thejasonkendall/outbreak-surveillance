version: '3.8'

services:
  # PostgreSQL Database (official image)
  postgres:
    image: postgres:15-alpine
    container_name: health_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: health_intelligence
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-health_secure_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/health_intelligence_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d health_intelligence"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - health_network

  # Health Intelligence API (our custom image)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: health_api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-health_secure_2024}@postgres:5432/health_intelligence
      NEWS_API_KEY: ${NEWS_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      # For development: mount source code for hot reloading
      - ./api:/app/api:ro
      - ./database:/app/database:ro
    networks:
      - health_network

  # Dashboard (our custom nginx image)
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: health_dashboard
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    volumes:
      # For development: mount source code for live updates
      - ./dashboard:/usr/share/nginx/html:ro
    networks:
      - health_network

  # Data Collector (our custom image)
  collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    container_name: health_collector
    restart: "no"  # Run once for local development
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-health_secure_2024}@postgres:5432/health_intelligence
      NEWS_API_KEY: ${NEWS_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ENVIRONMENT: development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      # For development: mount source code
      - ./data-pipeline:/app/data-pipeline:ro
      - ./database:/app/database:ro
    networks:
      - health_network
    profiles:
      - collector  # Only run when explicitly requested

  
volumes:
  postgres_data:


networks:
  health_network:
    driver: bridge